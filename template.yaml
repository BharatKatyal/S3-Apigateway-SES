AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  s3-lambda-ses-static-landing-email-collection

  Sample SAM Template for s3-lambda-ses-static-landing-email-collection

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

  Api:
    Cors:
      AllowMethods: "'POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'" # Replace with your domain in production
# ... rest of the template remains unchanged

    

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    # LoggingConfig:
    #   LogFormat: JSON
Resources:



  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-static-website"
      # AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - POST
            AllowedOrigins:
              - "*"
      # Tags:
        # - Key: Name
        #   Value: !Sub "${AWS::StackName}-static-website-bucket"
        # - Key: Application
        #   Value: !Ref AWS::StackName
        # - Key: Environment
        #   Value: !Ref Environment
        # - Key: Team
        #   Value: !Ref Team
        # - Key: CostCenter
        #   Value: !Ref CostCenter
        # - Key: ApplicationOwner
        #   Value: !Ref ApplicationOwner
        # - Key: ApplicationOwnerEmail
        #   Value: !Ref ApplicationOwnerEmail
        # - Key: ApplicationOwnerPhone
        #   Value: !Ref ApplicationOwnerPhone
        # - Key: ApplicationOwnerAddress
        #   Value: !Ref ApplicationOwnerAddress
    
  UserDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-UserDataTable"
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EmailCollectionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    Properties:
      CodeUri: email_collection/
      Handler: app.lambda_handler
      Runtime: python3.9
      Events:
        EmailCollection:
          Type: Api # More info about API Event Source: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
          Properties:
            Path: /submit
            Method: POST
      Environment:
        Variables:
          USER_DATA_TABLE: !Ref UserDataTable
          SES_SOURCE_EMAIL: bharatkatyal@outlook.com
          SES_REGION: us-east-1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserDataTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  UserDataTable:
    Description: "UserDataTable"
    Value: !Ref UserDataTable
  StaticWebsiteBucket:
    Description: "StaticWebsiteBucket"
    Value: !Ref StaticWebsiteBucket
  APIGatewayAPI:
    Description: "APIGatewayAPI"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"