AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  s3-lambda-ses-static-landing-email-collection

  Sample SAM Template for s3-lambda-ses-static-landing-email-collection

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    # LoggingConfig:
    #   LogFormat: JSON
Resources:



  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-static-website"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      

  # StaticWebsiteBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref StaticWebsiteBucket
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: PublicReadGetObject
  #           Effect: Allow
  #           Principal:
  #             AWS: "*"
  #           Action: "s3:GetObject"
  #           Resource: !Sub "arn:aws:s3:::${StaticWebsiteBucket}/*"

  # PublicAccessPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties: 
  #     Bucket: !Ref StaticWebsiteBucket
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal: "*" 
  #           Action: "s3:GetObject"
  #           Resource: !Sub "arn:aws:s3:::${StaticWebsiteBucket}/*"




  UserDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-UserDataTable"
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EmailCollectionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    Properties:
      CodeUri: email_collection/
      Handler: app.lambda_handler
      Runtime: python3.9
      Events:
        EmailCollection:
          Type: Api # More info about API Event Source: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
          Properties:
            Path: /submit
            Method: POST
      Environment:
        Variables:
          USER_DATA_TABLE: !Ref UserDataTable
          SES_SOURCE_EMAIL: bharatkatyal@outlook.com
          SES_REGION: us-east-1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserDataTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  UserDataTable:
    Description: "UserDataTable"
    Value: !Ref UserDataTable
  StaticWebsiteBucket:
    Description: "StaticWebsiteBucket"
    Value: !Ref StaticWebsiteBucket
  APIGatewayAPI:
    Description: "APIGatewayAPI"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"